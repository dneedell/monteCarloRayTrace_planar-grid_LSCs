%
%   FILE NAME:
%       saveFile.m
%
%   FILE PURPOSE:
%       To save all relevant output and input data/parameters of the
%       luminescent solar concentrator simulation into the assigned
%       directory.
%-------------------------------------------------------------------------

function [] = saveFile(prefix,simWavelengthRange, dataWavelengthRange,  ...
        lscCellThickness, xSize, ySize, spotSize, lumPLSpectrum,        ...
        lumAbsSpectrum, lumOpticalDensity, lumPLQY,lumScatterDistance,  ...
        wgEdgeReflect, wgEdgeScatter, geometricGain,                    ...
        collectPhotonRaw_lscCell, collectPhotonRaw_bottomCell,          ...
        collectPhotonWavelength_lscCell, xInject, yInject,              ...
        collectPhotonWavelength_bottomCell, numPhotonsLost,             ...
        IscTotal_lscCell, IscTotal_bottomCell, testDate,                ...
        topFilterFileIndex, botFilterFileIndex, lscCellBifacialBool,    ...
        JscTotal_lscCell, Voc_lscCell, Voc_bottomCell, FF_lscCell,      ...
        FF_bottomCell, JscTotal_bottomCell, powerTotalOut_bottomCell,   ...
        powerTotalOut_lscCell, powerTotalOut_module, powerTotalIn,      ...
        powerEfficiency_module, collectPhotonDir_bottomCell,            ...
        collectPhotonDir_lscCell, numFilterBounces, numLSCEdgeBounces,  ...
        numWgModeBounces, waveguideThickness, mirrorNameTop,            ...
        mirrorNameBottom, numPLEvents, probNotAbsPolymer,               ...
        reflect_lscCell, reflect_bottomCell, IQE_lscCell,               ...
        IQE_bottomCell, lumPLSpectrumCompact, reflectFilterTop_sPol,    ...
        reflectFilterBottom_sPol, percentNormal, botCellFileIndex,      ...
        reflectBlueFilter, BlueFilterBool, anisotropicBool,             ...
        anisotropicFuncIndex, lscCellEnergyBandgap, filterRefFactor,    ...
        anisotropicFrac, ERE_lscCell, waveguideRefIndex, anisotropicFunc)
    
        
        %   NORMALIZE VARIABLES TO BE AREA NORMALIZED (GRID POINTS).
        %------------------------------------------------------------------
        %   The number of lost photons per wavelength normalized:
        numPhotonsLost = numPhotonsLost./size(xInject,2)^2;
        %   The number of mirror bounces normalized:
        numFilterBounces = sum(sum(numFilterBounces,3),2)./             ...
        size(xInject,2)^2;
        %   The number of device edge reflections (not in the waveguide):
        numLSCEdgeBounces = sum(sum(numLSCEdgeBounces,3),2)./           ...
        size(xInject,3)^2;
        %   The number of waveguide reflections:
        numWgModeBounces = sum(sum(numWgModeBounces,3),2)./             ...
        size(xInject,3)^2;
        %   The total number of photons collected by the LSC Cell:
        collectPhotonRaw_lscCell = collectPhotonRaw_lscCell./           ...
        size(xInject,3)^2;
        %   The total number of photons collected by the Bottom Cell:
        collectPhotonRaw_bottomCell = collectPhotonRaw_bottomCell./     ...
        size(xInject,3)^2;
        %   The total number of LSC cell photons collected by wavelength:
        collectPhotonWavelength_lscCell = sum(sum(                      ...
        collectPhotonWavelength_lscCell,3),2)./ size(xInject,3)^2;
        %   The total number of Si photons collected by wavelength:
        collectPhotonWavelength_bottomCell = sum(sum(                   ...
        collectPhotonWavelength_bottomCell,3),2)./size(xInject,3)^2;
        %   The average number of photoluminescences per wavelength:
        numPLEvents = sum(sum(numPLEvents,3),2) ./size(xInject,3)^2;
        
        
        %   SIMPLIFY THE COLLECTED PHOTON DIRECTION ARRAY.
        %------------------------------------------------------------------
        %   Save variable for number of photons hitting lsc Cell:
        photonsIncident_lscCell = zeros(size(collectPhotonDir_lscCell,1),1);
        %   Next loop through the wavelengths:
        for i = 1:size(collectPhotonDir_lscCell,1)
            %   Loop through the x-coordinates:
            for j = 1:size(collectPhotonDir_lscCell,3)
                %   Loop throughh the y-coordinates:
                for k = 1:size(collectPhotonDir_lscCell,4)
                    %   Check to see if the velocity was downards on
                    %   top side:
                    if collectPhotonDir_lscCell(i,1,j,k,3) < 0
                        %   Add one to the number of incident photons:
                        photonsIncident_lscCell(i) =                    ...
                        photonsIncident_lscCell(i) + 1;
                    end
                    %   Check to see if the velocity was upwards on
                    %   bottom side:
                    if collectPhotonDir_lscCell(i,2,j,k,3) > 0
                        %   Add one to the number of incident photons:
                        photonsIncident_lscCell(i) =                    ...
                        photonsIncident_lscCell(i) +1;
                    end
                    %   Check to see if the velocity was backwards on
                    %   front side:
                    if collectPhotonDir_lscCell(i,3,j,k,2) < 0
                        %   Add one to the number of incident photons:
                        photonsIncident_lscCell(i) =                    ...
                        photonsIncident_lscCell(i) +1;
                    end
                    %   Check to see if the velocity was forwards on
                    %   back side:
                    if collectPhotonDir_lscCell(i,4,j,k,2) > 0
                        %   Add one to the number of incident photons:
                        photonsIncident_lscCell(i) =                    ...
                        photonsIncident_lscCell(i) +1;
                    end
                    %   Check to see if the velocity was leftwards on
                    %   right side:
                    if collectPhotonDir_lscCell(i,5,j,k,2) < 0
                        %   Add one to the number of incident photons:
                        photonsIncident_lscCell(i) =                    ...
                        photonsIncident_lscCell(i) +1;
                    end
                    %   Check to see if the velocity was rightwards on
                    %   left side:
                    if collectPhotonDir_lscCell(i,6,j,k,2) > 0
                        %   Add one to the number of incident photons:
                        photonsIncident_lscCell(i) =                    ...
                        photonsIncident_lscCell(i) +1;
                    end
                end
            end
        end
        %   Now normalize the photons incident count:
        photonsIncident_lscCell = photonsIncident_lscCell./             ...
        size(xInject,3)^2;
        %   Save variable for number of photons hitting bottom Cell:
        photonsIncident_bottomCell =                                    ...
        zeros(size(collectPhotonDir_bottomCell,1),1);
        %   Next loop through the wavelengths:
        for i = 1:size(collectPhotonDir_bottomCell,1)
            %   Loop through the x-coordinates:
            for j = 1:size(collectPhotonDir_bottomCell,3)
                %   Loop throughh the y-coordinates:
                for k = 1:size(collectPhotonDir_bottomCell,4)
                    %   Check to see if the velocity was downards on
                    %   top side:
                    if collectPhotonDir_bottomCell(i,1,j,k,3) < 0
                        %   Add one to the number of incident photons:
                        photonsIncident_bottomCell(i) =                   ...
                        photonsIncident_bottomCell(i) + 1;
                    end
                end
            end
        end
        %   Now normalize the photons incident count:
        photonsIncident_bottomCell = photonsIncident_bottomCell./       ...
        size(xInject,3)^2;
  
    
        %   MAKE FOLDER AND FILENAME AND SAVE.
        %------------------------------------------------------------------
        %   Folder Name to save the workspace to:
        folderName = strcat('testingData_',testDate);
        %   Check to see if there already exists a folder in this directory
        %   with this name:
        if exist(folderName, 'dir') == 0
            %   If not, create this directory:
            mkdir(folderName);
        end
        %   Write the filename with the input parameters in the title:
        filename = [strcat(folderName,'/'),                             ...
            num2str(geometricGain), 'GG_',                              ...
            num2str(lumScatterDistance), 'scattDist_',                  ...
            num2str(wgEdgeReflect), 'edgeR_',                           ...
            num2str(wgEdgeScatter), 'edgeScatt_',                       ...
            num2str(topFilterFileIndex), 'topFilterIndex_',             ...
            num2str(filterRefFactor),'topFiltR_',                       ...
            num2str(botFilterFileIndex), 'botFilterIndex_',             ...
            num2str(lscCellBifacialBool), 'lscCellBif_',                ...
            num2str(lumOpticalDensity), 'OD_',                          ...
            num2str(lumPLQY), 'PLQY_',                                  ...
            num2str(waveguideThickness),'wgThick_',                     ...
            num2str(waveguideRefIndex),'wgRefIndex_',                   ...
            num2str(percentNormal),'DNI_',                              ...
            num2str(botCellFileIndex), 'botCellIndex_',                 ...
            num2str(BlueFilterBool),'BlueFilter_',                      ...
            num2str(lscCellEnergyBandgap),'lscBandgap_',                ...
            num2str(ERE_lscCell),'lscCellERE_',                         ...
            num2str(anisotropicBool),'anisBool_',                       ...
            num2str(anisotropicFrac),'anisFrac.mat'];
        %   Clear unneccesary variables:
        clear collectPhotonDir_lscCell collectPhotonDir_bottomCell
        %   Save the file with the appropriate filename:
        save(filename); 
end






